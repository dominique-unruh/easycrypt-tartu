(* --------------------------------------------------------------------
 * Copyright (c) - 2012--2016 - IMDEA Software Institute
 * Copyright (c) - 2012--2016 - Inria
 *
 * Distributed under the terms of the CeCILL-B-V1 license
 * -------------------------------------------------------------------- *)

require (*--*) NewPRP.

clone include NewPRP.

module type StrongPRP = {
  proc init(): unit
  proc f (x : D): D
  proc fi(x : D): D
}.

module type StrongPRP_Oracles = {
  proc f (x:D): D
  proc fi(x:D): D
}.

module type StrongPRP_Distinguisher(P:StrongPRP_Oracles) = {
  proc distinguish(): bool
}.

module StrongPRP_IND (P:StrongPRP, D:StrongPRP_Distinguisher) = {
  proc main(): bool = {
    var b;

         P.init();
    b <@ D(P).distinguish();
    return b;
  }
}.

module StrongPRP_Wrap (P:PRP) = {
  var k : K

  proc init() = {
    k <@ P.keygen();
  }

  proc f(x : D) = {
    var r;
    r <@ P.f(k,x);
    return r;
  }

  proc fi(x : D) = {
    var r;
    r <@ P.fi(k,x);
    return r;
  }
}.

module Strong_IND_PRP (P:PRP, D:StrongPRP_Distinguisher) =
  StrongPRP_IND(StrongPRP_Wrap(P),D).

(** To define the security of an operator P: K -> D -> D as a strong
    PRP, one needs to clone IdealPRP and ConcretePRP with the
    appropriate substitutions. The Strong PRP advantage of a
    distinguisher D is then
    Adv^{StrongPRP}_P = |Pr[StrongPRP_IND(Ideal,D)]
                           - Pr[StrongPRP_IND(StrongPRP_Wrap(P),D)|. **)
