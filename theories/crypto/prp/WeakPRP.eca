(* --------------------------------------------------------------------
 * Copyright (c) - 2012--2016 - IMDEA Software Institute
 * Copyright (c) - 2012--2016 - Inria
 *
 * Distributed under the terms of the CeCILL-B-V1 license
 * -------------------------------------------------------------------- *)

require (*--*) NewPRP.

clone include NewPRP.

module type WeakPRP = {
  proc init()   : unit
  proc f   (x:D): D
}.

module type WeakPRP_Oracles = {
  proc f(x : D): D
}.

module type WeakPRP_Distinguisher(F:WeakPRP_Oracles) = {
  proc distinguish(): bool
}.

module WeakPRP_IND (P:WeakPRP,D:WeakPRP_Distinguisher) = {
  proc main(): bool = {
    var b;

         P.init();
    b <@ D(P).distinguish();
    return b;
  }
}.

module WeakPRP_Wrap(P:PRP) = {
  var k: K

  proc init()   : unit = { k <@ P.keygen(); }
  proc f   (x:D): D    = { var r; r <@ P.f(k,x);  return r; }
  proc fi  (x:D): D    = { var r; r <@ P.fi(k,x); return r; }
}.

module Weak_IND_PRP (P:PRP, D:WeakPRP_Distinguisher) =
  WeakPRP_IND(WeakPRP_Wrap(P),D).

(** To define the security of an operator P: K -> D -> D as a weak
    PRP, one needs to clone IdealPRP and ConcretePRP with the
    appropriate substitutions. The Strong PRP advantage of a
    distinguisher D is then
    Adv^{WeakPRP}_P = |Pr[WeakPRP_IND(Ideal,D)]
                           - Pr[WeakPRP_IND(WeakPRP_Wrap(P),D)|. **)
