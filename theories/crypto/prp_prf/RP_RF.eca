(* --------------------------------------------------------------------
 * Copyright (c) - 2012--2016 - IMDEA Software Institute
 * Copyright (c) - 2012--2016 - Inria
 *
 * Distributed under the terms of the CeCILL-B-V1 license
 * -------------------------------------------------------------------- *)

require import Fun Option NewLogic Int List FSet NewFMap Real Distr.
require import Dexcepted.
require (*--*) NewPRP WeakPRP IdealPRP.
require (*--*) NewPRF IdealPRF.
require (*--*) Birthday.

(** We assume a finite domain D, equipped with its uniform
    distribution. **)
type D.
op uD: { D distr | is_uniform_over uD predT } as uD_uf_fu.

(** and a type K equipped with a lossless distribution **)
type K.
op dK: { K distr | is_lossless dK } as dK_ll.

clone import WeakPRP as PRPt with
  type K  <- K,
    op dK <- dK,
  type D  <- D
proof * by smt ml=0 w=dK_ll.

clone import IdealPRP as PRPi with
  type K  <- K,
    op dK <- dK,
  type D  <- D,
    op dD <- uD
proof * by smt ml=0 w=(dK_ll uD_uf_fu)
rename "RandomPermutation" as "PRPi".

(** This would be split: we only need module types and ideal PRF **)
clone import IdealPRF as PRFi with
  type K  <- K,
  type D  <- D,
  type R  <- D,
  op   dK <- dK,
  op   dR <- uD
proof * by smt ml=0 w=(dK_ll uD_uf_fu)
rename "RandomFunction" as "PRFi".

op q : { int | 0 < q } as gt0_q.

(* In the proof, we consider the following bad event (applied to the
    PRF's internal map):
      "A collision occurs in map m whenever there exist distinct x and
      x' that are both in m's domain and have the same image by m." *)
pred collision (m:(D,D) fmap) = exists x x',
  x' <> x /\
  mem (dom m) x /\ mem (dom m) x' /\ m.[x] = m.[x'].

(* Some useful facts about the bad event *)
lemma no_collision (m:(D,D) fmap):
  !collision m <=>
  forall x x',
    x' = x \/
    !mem (dom m) x  \/
    !mem (dom m) x' \/
    m.[x] <> m.[x'].
proof.
rewrite /collision negb_exists /=; apply/forall_iff=> /= x.
by rewrite negb_exists /=; apply/forall_iff=> /= x'; rewrite !negb_and.
qed.

lemma collision_add (m:(D,D) fmap) x y:
  !mem (dom m) x =>
  collision m.[x <- y] <=> collision m \/ mem (rng m) y.
proof.
move=> x_notin_m; split=> [[z z' [z'_neq_z]]|].
+ rewrite dom_set !inE=> -[z_in_m] [z'_in_m] mz_eq_mz'.
  case (mem (rng m) y)=> //= y_notin_rngm.
  by exists z, z'; smt ml=0 w=@NewFMap.
move=> [[z z' [z'_neq_z] [z_in_m] [z'_in_m] mz_eq_mz']|/in_rng [x' mx']].
+ exists z, z'; rewrite z'_neq_z dom_set !inE !getP mz_eq_mz' z_in_m z'_in_m /=.
  rewrite (contra _ _ (congr1 (mem (dom m)) z  x)) 1:x_notin_m 1:z_in_m //=.
  by rewrite (contra _ _ (congr1 (mem (dom m)) z' x)) 1:x_notin_m 1:z'_in_m.
by exists x, x'; smt ml=0 w=@NewFMap.
qed.

lemma collision_stable (m:(D,D) fmap) y y':
  collision m =>
  !mem (dom m) y =>
  collision m.[y <- y']
by [].

(** To factor out the difficult step, we parameterize the PRP by a
    procedure that samples its output, and provide two instantiations
    of it. **)
module type Sample_t = {
  proc sample(X:D fset): D
}.

module Direct = {
  proc sample(X:D fset): D = {
    var r;

    r = $uD \ (mem X);
    return r;
  }
}.

module Indirect = {
  proc sample(X:D fset): D = {
    var r;

    r = $uD;
    if (mem X r) {
      r = $uD \ (mem X);
    }
    return r;
  }
}.

module PRPi'(S:Sample_t) = {
  proc init =  PRPi.init

  proc f(x:D): D = {
    if (!mem (dom PRPi.m) x)
      PRPi.m.[x] = S.sample(rng PRPi.m);
    return oget PRPi.m.[x];
  }
}.

lemma nosmt notin_supportIP (P : 'a -> bool) (d : 'a distr):
  (exists a, support d a /\ !P a) <=> mu d P < mu d predT.
proof.
rewrite (mu_split _ predT P) /predI /predT /predC /=.
rewrite (exists_eq (fun a => support d a /\ !P a) (fun a => !P a /\ in_supp a d)) /=.
+ by move=> a /=; rewrite andbC.
by rewrite -(witness_support (predC P)) -/(predC _) /#.
qed.

(* Some losslessness lemmas *)
lemma excepted_lossless (m:(D,D) fmap):
  (exists x, !mem (dom m) x) =>
  mu (uD \ (mem (rng m))) predT = 1%r.
proof.
move=> /endo_dom_rng h; rewrite -/(weight _) dexcepted_ll //.
+ smt w=uD_uf_fu.
have [/pred_ext] + [<- _]:= uD_uf_fu.
rewrite -(etaE (support uD)) etaP=> h'.
by apply/notin_supportIP; rewrite h'.
qed.

phoare Indirect_ll: [Indirect.sample: exists x, support uD x /\ !mem X x ==> true] = 1%r.
proof.
proc; seq  1: (exists x, support uD x /\ !mem X x)=> //=.
+ by rnd (predT); skip; smt ml=0 w=uD_uf_fu.
if=> //=.
+ rnd (predT); skip.
  progress [-split]; split=> //=.
  apply/dexcepted_ll.
  * smt ml=0 w=uD_uf_fu.
  * by have [_ [<- _]]:= uD_uf_fu; apply/notin_supportIP; exists x.
by hoare; rnd=> //=; skip=> &hr ->.
qed.

lemma PRPi'_Indirect_ll: islossless PRPi'(Indirect).f.
proof.
proc; if=> //=; wp; call Indirect_ll.
skip; progress.
have:= excepted_lossless (PRPi.m{hr}) _.
+ by exists x{hr}.
rewrite -/(weight _) weight_dexcepted /b2r.
case (weight uD = mu uD (mem (rng PRPi.m{hr})))=> //=.
rewrite notin_supportIP /= -(etaE (mem (rng _))) etaP.
by rewrite StdOrder.RealOrder.ltr_def=> -> /=; exact/mu_sub.
qed.

(** The proof is cut into 3 parts (sections):
      - We first focus on proving
         Pr[IND(PRPi'(Indirect),D).main() @ &m: res]
         <= Pr[IND(PRFi,D).main() @ &m: res]
          + Pr[IND(PRFi,D).main() @ &m: collision PRFi.m].
      - Second, we concretely bound (when the PRF oracle stops
        answering queries after the q-th):
          Pr[IND(PRFi,D).main() @ &m: collision PRFi.m]
          <= q^2 * Pr[x = $uD: x = witness]
      - We conclude by proving (difficult!)
         Pr[IND(PRPi,D).main() @ &m: res]
         = Pr[IND(PRPi'(Indirect),D).main() @ &m: res].

     Purists are then invited to turn the security statement about
     restricted oracles into a security statement about restricted
     adversaries. **)
section Upto.
  declare module D:PRF_Distinguisher {PRPi, PRFi}.
  axiom D_ll (O <: PRF_Oracle {D}): islossless O.f => islossless D(O).distinguish.

  local module PRP_indirect_bad = {
    var bad : bool

    proc init(): unit = {
             PRPi.init();
      bad <- false;
    }

    proc sample(X:D fset): D = {
      var r;

      r = $uD;
      if (mem X r) {
        bad <- true;
        r = $uD \ (mem X);
      }
      return r;
    }

    proc f(x:D): D = {
      if (!mem (dom PRPi.m) x)
        PRPi.m.[x] = sample(rng PRPi.m);
      return oget PRPi.m.[x];
    }
  }.

  local lemma PRPi'_Indirect_eq &m:
    Pr[IND(PRPi'(Indirect),D).main() @ &m: res]
    = Pr[IND(PRP_indirect_bad,D).main() @ &m: res].
  proof. by byequiv=> //=; proc; inline *; sim. qed.

  (** Upto failure: if a collision does not occur in PRFi.m, then the
      programs are equivalent **)
  lemma pr_PRPi'_Indirect_PRFi &m:
    `|Pr[IND(PRPi'(Indirect),D).main() @ &m: res]
      - Pr[IND(PRFi,D).main() @ &m: res]|
    <= Pr[IND(PRFi,D).main() @ &m: collision PRFi.m].
  proof.
  rewrite (PRPi'_Indirect_eq &m).
  byequiv: PRP_indirect_bad.bad=> //=; 2:smt.
  proc.
  call (_: collision PRFi.m,
           ={m}(PRPi,PRFi) /\ (PRP_indirect_bad.bad{1} <=> collision PRFi.m{2}),
           PRP_indirect_bad.bad{1} <=> collision PRFi.m{2}).
    exact D_ll.
    proc.
    if=> //=; inline *.
    swap{1} 1.
    seq  1  1: (={x} /\
                !mem (dom PRPi.m{1}) x{1} /\
                PRFi.m{2} = PRPi.m.[x <- r]{1} /\
                ((PRP_indirect_bad.bad \/ mem (rng PRPi.m) r){1} <=> collision PRFi.m{2})).
      by auto; smt.
      sp; if{1}.
        conseq (_: _ ==> collision PRFi.m{2} /\ PRP_indirect_bad.bad{1})=> //.
        by auto; smt.
      by auto; smt.
    move=> &2 bad; conseq (_: true ==> true: =1%r) (_: PRP_indirect_bad.bad ==> PRP_indirect_bad.bad)=> //=.
      by proc; if=> //=; inline *; seq  2: PRP_indirect_bad.bad; [auto|if=> //=; auto].
    proc; if=> //=; inline *.
    by seq  2: (X = rng PRPi.m /\ !mem (dom PRPi.m) x) 1%r 1%r 0%r _=> //=;
         [auto|if=> //=; auto|hoare; auto]; smt.
    move=> &1; conseq (_: collision PRFi.m ==> collision PRFi.m: =1%r)=> //=.
    by proc; if; auto; smt.
  by inline *; auto; progress; smt.
  qed.
end section Upto.

(** We now bound the probability of collisions by instantiating a
    generic Birthday Bound result:
      Pr[IND(PRFi,DBounder(D)).main() @ &m: collision PRFi.m]
      <= q^2 * Pr[x = $uD: x = witness],

    where DBounder prevents the distinguisher from calling the
    f-oracle more than q times. **)
module DBounder (D:PRF_Distinguisher,F:PRF_Oracle) = {
  module FBounder = {
    var c:int

    proc f(x:D): D = {
      var r = witness;

      if (c < q) {
        r = F.f(x);
        c = c + 1;
      }
      return r;
    }
  }

  module D = D(FBounder)

  proc distinguish(): bool = {
    var b;

    FBounder.c = 0;
    b = D.distinguish();
    return b;
  }
}.

section CollisionProbability.
  declare module D:PRF_Distinguisher {PRFi, DBounder}.
  axiom D_ll (O <: PRF_Oracle {D}): islossless O.f => islossless D(O).distinguish.

  local clone import Birthday as BBound with
    op q <- q,
    type T <- D,
    op uT <- uD
  proof * by smt.

  (* We construct a Birthday Bound adversary from the IND
     experiment. *)
  local module A(S:ASampler):Adv(S) = {
    (* We simulate an f-oracle using the s-oracle *)
    module F = {
      proc init = PRFi.init

      proc f(x:D): D = {
        if (!mem (dom PRFi.m) x) {
          PRFi.m.[x] = S.s();
        }
        return oget PRFi.m.[x];
      }
    }

    (* Recall from the Birthday clone that Birthday Bound adversaries
       are restricted to make at most q oracle queries. *)
    module IND = IND(F,DBounder(D))

    proc a(): unit = {
      var b:bool;
      b = IND.main();
    }
  }.

  local lemma A_ll (S <: ASampler {A}) &m: islossless S.s => islossless A(S).a.
  proof.
  move=> S_ll; proc; inline*; wp.
  call (_: true).
  + exact D_ll.
  + by proc; inline*; do!(sp; if=> //=; auto); wp; call S_ll.
  by inline*; auto.
  qed.

  local lemma A_bounded &m: size Sample.l{m} = 0 => Pr[A(Sample).a() @ &m: size Sample.l <= q] = 1%r.
  proof.
  move=> l_empty; byphoare (_: size Sample.l = 0 ==> _)=> //=.
  proc.
  inline*; wp.
  call (_: size Sample.l <= DBounder.FBounder.c /\ DBounder.FBounder.c <= q).
    exact D_ll.
    by proc; inline*; do!(sp; if=> //=); auto; smt.
  by auto; smt.
  qed.

  local lemma pr_PRFi_Exp_collision &m:
    Pr[IND(PRFi,DBounder(D)).main() @ &m: collision PRFi.m]
    = Pr[Exp(Sample,A).main() @ &m: !uniq Sample.l].
  proof.
  byequiv (_: ={glob D} ==> collision PRFi.m{1} <=> !uniq Sample.l{2})=> //=.
  proc; inline*; wp.
  call (_: ={PRFi.m,DBounder.FBounder.c} /\
           (forall x, mem (rng PRFi.m) x <=> mem Sample.l x){2} /\
           (collision PRFi.m{1} <=> !uniq Sample.l{2})).
    proc; inline*.
    sp; if=> //=.
    sp; if=> //=; auto.
    progress [-split].
    rewrite H3 //=; split.
      move=> x0; rewrite rng_set !inE.
      by rewrite rng_rem; smt.
      by rewrite NewLogic.negb_and /= collision_add // H H0 orbC.
  auto; progress.
    by rewrite rng0 in_fset0.
    smt.
  qed.

  lemma pr_PRFi_collision &m:
    Pr[IND(PRFi,DBounder(D)).main() @ &m: collision PRFi.m]
    <= (q^2)%r * mu uD (pred1 witness).
  proof.
  by rewrite (pr_PRFi_Exp_collision &m) (pr_collision A A_ll A_bounded &m).
  qed.
end section CollisionProbability.

(* We pull together the results of the first two sections *)
lemma PartialConclusion (D <: PRF_Distinguisher {PRPi, PRFi, DBounder}) &m:
  (forall (O <: PRF_Oracle {D}), islossless O.f => islossless D(O).distinguish) =>
  `|Pr[IND(PRPi'(Indirect),DBounder(D)).main() @ &m: res]
    - Pr[IND(PRFi,DBounder(D)).main() @ &m: res]|
  <= (q^2)%r * mu uD (pred1 witness).
proof.
move=> D_ll.
have:= pr_PRFi_collision D D_ll &m.
have:= pr_PRPi'_Indirect_PRFi (DBounder(D)) _ &m.
  move=> O O_ll; proc.
  call (D_ll (<: DBounder(D,O).FBounder) _).
    by proc; sp; if=> //=; wp; call O_ll.
  by auto.
smt.
qed.

(** This section proves the equivalence between the Ideal PRP and the
    module PRPi'(Indirect) used in section Upto. **)
section PRPi_PRPi'_Indirect.
  (* The key is in proving that Direct.sample and Indirect.sample
     define the same distribution. We do this by extensional equality
     of distributions:
       forall a, Pr[Direct.sample: res = a] = Pr[Indirect.sample: res = a]. *)
  equiv eq_Direct_Indirect: Direct.sample ~ Indirect.sample: ={X} ==> ={res}.
  proof.
  bypr (res{1}) (res{2})=> //. (* Pointwise equality of distributions *)
  progress.
  (* We first perform the computation on the easy side,... *)
  cut ->: Pr[Direct.sample(X{1}) @ &1: a = res] = mu (uD \ (mem X){1}) (pred1 a).
    byphoare (_: X = X{1} ==> _)=> //=.
    proc; rnd=> //=; skip; progress.
    by rewrite pred1E -{2}(etaP ((=) a)) etaE.
  subst X{1}.
  (* ... and we are left with the difficult side *)
  byphoare (_: X = X{2} ==> _)=> //=.
  (* We deal separately with the case where a is in X and thus has
     probability 0 of being sampled) *)
  case (mem X{2} a)=> [a_in_X | a_notin_X].
    conseq (_: _ ==> _: 0%r); first smt.
    proc.
    seq  1: (mem X r)
            _ 0%r
            _ 0%r
            (X = X{2}).
      by auto.
      by rcondt 1=> //=; rnd=> //=; skip; smt.
      by rcondf 1=> //=; hoare; skip; smt.
      done.
  (* And we are now left with the case where a is not in X *)
  proc.
    alias 2 r0 = r.
    (* There are two scenarios that lead to a = r:
         - r0 = a /\ r = a (with probability mu uD (pred1 a));
         - r0 <> a /\ r = a (with probability mu uD (fun x, mem x X) * mu (uD \ X) (pred1 a)). *)
    phoare split (mu uD (pred1 a)) (mu uD (mem X) * mu (uD \ (mem X)) (pred1 a)): (r0 = a).
      (* Bound *)
      progress.
      rewrite -/(mu_x (uD \ (mem X){2}) _) mux_dexcepted a_notin_X /=.
      rewrite /weight /mu_x.
      cut not_empty: mu uD predT - mu uD (mem X{2}) <> 0%r.
        rewrite -mu_not.
        cut: 0%r < mu uD (predC (mem X{2})); last smt.
        rewrite witness_support; exists a; rewrite /predC /= a_notin_X /=.
        by have [->]:= uD_uf_fu.
      by smt ml=0 w=uD_uf_fu.
      (* case r0 = a *)
      seq  2: (a = r0) (mu uD (pred1 a)) 1%r _ 0%r (r0 = r /\ X = X{2}).
        by auto.
        by wp; rnd; skip; progress; rewrite pred1E -(etaE ((=) a)) etaP.
        by rcondf 1.
        by hoare; conseq (_: _ ==> true)=> //=; smt.
        done.
    (* case r0 <> a *)
    seq  2: (!mem X r)
            _                 0%r
            (mu uD (mem X)) (mu (uD \ (mem X)) (pred1 a))
            (r0 = r /\ X = X{2}).
      by auto.
      by hoare; rcondf 1=> //=; skip; smt.
      by wp; rnd.
      rcondt 1=> //=; rnd (pred1 a).
      by skip; smt.
      done.
  qed.

  (* The rest is easy *)
  local equiv eq_PRPi_PRPi'_Indirect: PRPi.f ~ PRPi'(Indirect).f:
    ={x, PRPi.m} ==> ={res, PRPi.m}.
  proof.
  transitivity PRPi'(Direct).f (={PRPi.m,x} ==> ={PRPi.m,res}) (={PRPi.m,x} ==> ={PRPi.m,res}).
  + by move=> &1 &2 [->> ->>]; exists PRPi.m{2}, x{2}.
  + done.
  + by proc; inline *; if=> //=; auto.
  + by proc; if=> //=; wp; call eq_Direct_Indirect.
  qed.

  declare module D:PRF_Distinguisher {PRPi}.

  lemma pr_PRPi_PRPi'_Indirect &m:
    Pr[IND(PRPi,D).main() @ &m: res] = Pr[IND(PRPi'(Indirect),D).main() @ &m: res].
  proof.
  byequiv=> //=.
  proc.
  call (_: ={PRPi.m}).
    by apply eq_PRPi_PRPi'_Indirect.
  by inline*; auto.
  qed.
end section PRPi_PRPi'_Indirect.

lemma Conclusion (D <: PRF_Distinguisher {PRPi, PRFi, DBounder}) &m:
  (forall (O <: PRF_Oracle {D}), islossless O.f => islossless D(O).distinguish) =>
  `|Pr[IND(PRPi,DBounder(D)).main() @ &m: res]
    - Pr[IND(PRFi,DBounder(D)).main() @ &m: res]|
  <= (q^2)%r * mu uD (pred1 witness).
proof.
move=> D_ll.
by rewrite (pr_PRPi_PRPi'_Indirect (DBounder(D)) &m) (PartialConclusion D &m D_ll).
qed.
