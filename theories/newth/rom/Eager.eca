(* --------------------------------------------------------------------
 * Copyright (c) - 2012-2015 - IMDEA Software Institute and INRIA
 * Distributed under the terms of the CeCILL-B licence.
 * -------------------------------------------------------------------- *)

require import Distr NewList NewFMap.
require (*--*) FinType NewROM.

clone include NewROM.
clone include FinType with
  type t <- from.

module RO: Oracle = {
  var m:(from,to) fmap

  proc init(): unit = {
    var y : to;
    var work : from list;
    var f : from;

    m = map0;
    work = elts;
    while (work <> []) {
      f = head witness work;
      y = $dsample f;
      m.[f] = y;
      work = behead work;
    }
  }

  proc o(x:from): to = {
    return oget m.[x];
  }
}.

hoare RO_init_full: RO.init: true ==> forall x, mem (dom RO.m) x.
proof.
  proc.
  while (forall x, mem work x \/ mem (dom RO.m) x).
    auto; progress.
    rewrite domP in_setU in_set1.
    case: (H x)=> [| -> //=].
    by rewrite -(mem_head_behead witness)// =>[-> | ->].
  by auto; smt.
qed.

lemma RO_init_ll:
  (forall x, mu (dsample x) predT = 1%r) =>
  islossless RO.init.
proof.
  move=> dsampleL; proc.
  while (true) (size work).
    auto; progress.
      by apply dsampleL.
      move: (work{hr}) H=> {H1 v H0 &hr dsampleL}.
      by case=> //=; smt.
  by auto; smt.
qed.

lemma RO_o_ll: islossless RO.o.
proof. by proc; wp. qed.

equiv RO_init_eq: RO.init ~ RO.init: true ==> ={glob RO}.
proof. by proc; while (={glob RO, work}); auto. qed.

equiv RO_o_eq: RO.o ~ RO.o: ={glob RO, x} ==> ={glob RO, res}
by sim.

hoare dom_RO_init x: RO.init: true ==> mem (dom RO.m) x.
proof. by conseq* RO_init_full=> //= m ->. qed.
