require import Fun Int List FSet FMap Real Distr Sum.
require import Dexcepted.
require (*--*) AWord PRP PRF.
require (*--*) Birthday.

type D.

op uD: D distr.
axiom uD_uf_fu: is_uniform_over uD predT.

lemma uD_suf: is_subuniform uD by [].
lemma uD_fu:  is_full uD by [].
lemma uD_ll:  is_lossless uD by [].

(* ... and for any non-negative number q of queries made by the
   adversary *)
op q:int.
axiom lt0q: 0 < q.

(* We consider a PRP P, Pinv: K -> D -> D and a PRF F: K -> D -> D *)
type K.

op dK: K distr.
axiom dK_ll: is_lossless dK.

op P   : K -> D -> D.
op Pinv: K -> D -> D.

axiom bijective_P k:
     support dK k
  =>    cancel (P k) (Pinv k)
     /\ cancel (Pinv k) (P k).

op F: K -> D -> D.

(** Defining security notions:
      - P is a secure PRP on D indexed by K
      - F is a secure endo-PRF on D indexed by K **)
(* We do so using cloning and instantiation *)
clone import PRP as PRPa with
  type K    <- K,
  type D    <- D,
  op   dK   <- dK,
  op   dD   <- uD,
  op   P    <- P,
  op   Pinv <- Pinv
proof * by smt.
import Weak_PRP.

clone import PRF as PRFa with
  type K  <- K,
  type D  <- D,
  type R  <- D,
  op   dK <- dK,
  op   dR <- uD,
  op   F  <- F
proof * by smt.

(** Note at this stage that the module types and modules line up, and
    we have in particular:
      - PRPa.Distinguisher ~ PRFa.Distinguisher,
      - PRPa.PRP ~ PRFa.PRF (and PRPa.PRPA ~ PRFa.PRFA),
      - PRPa.IND = PRFa.IND
   However, crucially, we do not have PRPa.PRPi = PRFa.PRFi. Our goal
   now is to bound the computational distance between these two
   modules. In practice, we will first bound the computational distance
   between a re-expression PRPi' of PRPi. The last step in the proof is
   __very__ complex to formalize and is more heavily guided. **)

(* In the proof, we consider the following bad event (applied to the
    PRF's internal map):
      "A collision occurs in map m whenever there exist distinct x and
      x' that are both in m's domain and have the same image by m." *)
pred collision (m:(D,D) map) = exists x x',
  x <> x' /\
  mem (dom m)x  /\ mem (dom m) x' /\ m.[x] = m.[x'].

(* Some useful facts about the bad event *)
lemma no_collision (m:(D,D) map):
  (!collision m) = forall x x',
                     x = x' \/
                     !mem (dom m) x \/
                     !mem (dom m) x' \/
                     m.[x] <> m.[x'].
proof. by rewrite /collision; smt. qed.

lemma collision_add (m:(D,D) map) x y:
  !mem (dom m) x =>
  collision m.[x <- y] <=> collision m \/ mem (rng m) y.
proof.
  move=> x_notin_m; split; rewrite {1}/collision.
    elim=> z z' [z_neq_z'] [z_in_m] [z'_in_m] mz_eq_mz'.
    case (mem (rng m) y)=> //= y_notin_rngm.
    by exists z, z'; smt.
    elim.
      elim=> z z' [z_neq_z'] [z_in_m] [z'_in_m] mz_eq_mz'.
      by exists z, z'; smt.
      rewrite mem_rng=> -[] x' mx'.
      by exists x, x'; smt.
qed.

lemma collision_stable (m:(D,D) map) y y':
  collision m =>
  !mem (dom m) y =>
  collision m.[y <- y']
by [].

(** To factor out the difficult step, we parameterize the PRP by a
    procedure that samples its output, and provide two instantiations
    of it. **)
module type Sample_t = {
  proc sample(X:D fset): D
}.

module Direct = {
  proc sample(X:D fset): D = {
    var r;

    r = $uD \ X;
    return r;
  }
}.

module Indirect = {
  proc sample(X:D fset): D = {
    var r;

    r = $uD;
    if (mem X r) {
      r = $uD \ X;
    }
    return r;
  }
}.

module PRPi'(S:Sample_t) = {
  proc init =  PRPi.init

  proc f(x:D): D = {
    if (!mem (dom PRPi.m) x)
      PRPi.m.[x] = S.sample(rng PRPi.m);
    return oget PRPi.m.[x];
  }
}.

(* Some losslessness lemmas *)
lemma excepted_lossless (m:(D,D) map):
  (exists x, !mem (dom m) x) =>
  mu (uD \ rng m) predT = 1%r.
proof.
  move=> /endo_dom_rng [] x x_notin_rngm.
  by rewrite -/(weight _) mu_weight_def; smt.
qed.

phoare Indirect_ll: [Indirect.sample: exists x, support uD x /\ !mem X x ==> true] = 1%r.
proof.
  proc.
  seq  1: (exists x, support uD x /\ !mem X x)=> //=.
    by rnd (predT); skip; smt.
    if=> //=.
    rnd (predT); skip.
    progress.
    move=> {H1}.
    smt.
    by hoare; rnd=> //=; skip=> &hr ->.
qed.

lemma PRPi'_Indirect_ll: islossless PRPi'(Indirect).f.
proof.
  proc; if=> //=; wp; call Indirect_ll.
  skip; progress.
  have [x' x'_notin_rng]:= endo_dom_rng PRPi.m{hr} _.
    by exists x{hr}.
  by exists x'; smt.
qed.

(** The proof is cut into 3 parts (sections):
      - We first focus on proving
         Pr[IND(PRPi'(Indirect),D).main() @ &m: res]
         <= Pr[IND(PRFi,D).main() @ &m: res]
          + Pr[IND(PRFi,D).main() @ &m: collision PRFi.m].
      - Second, we concretely bound (when the PRF oracle stops
        answering queries after the q-th):
          Pr[IND(PRFi,D).main() @ &m: collision PRFi.m]
          <= q^2 * Pr[x = $uD: x = witness]
      - We conclude by proving (difficult!)
         Pr[IND(PRPi,D).main() @ &m: res]
         = Pr[IND(PRPi'(Indirect),D).main() @ &m: res].

     Purists are then invited to turn the security statement about
     restricted oracles into a security statement about restricted
     adversaries. **)
section Upto.
  declare module D:Distinguisher {PRPi, PRFi}.
  axiom D_ll (O <: PRF_Oracles {D}): islossless O.f => islossless D(O).distinguish.

  local module PRP_indirect_bad = {
    var bad : bool

    proc init(): unit = {
             PRPi.init();
      bad <- false;
    }

    proc sample(X:D fset): D = {
      var r;

      r = $uD;
      if (mem X r) {
        bad <- true;
        r = $uD \ X;
      }
      return r;
    }

    proc f(x:D): D = {
      if (!mem (dom PRPi.m) x)
        PRPi.m.[x] = sample(rng PRPi.m);
      return oget PRPi.m.[x];
    }
  }.

  local lemma PRPi'_Indirect_eq &m:
    Pr[IND(PRPi'(Indirect),D).main() @ &m: res]
    = Pr[IND(PRP_indirect_bad,D).main() @ &m: res].
  proof. by byequiv=> //=; proc; inline *; sim. qed.

  (** Upto failure: if a collision does not occur in PRFi.m, then the
      programs are equivalent **)
  lemma pr_PRPi'_Indirect_PRFi &m:
    `|Pr[IND(PRPi'(Indirect),D).main() @ &m: res]
      - Pr[IND(PRFi,D).main() @ &m: res]|
    <= Pr[IND(PRFi,D).main() @ &m: collision PRFi.m].
  proof.
    rewrite (PRPi'_Indirect_eq &m).
    byequiv: PRP_indirect_bad.bad=> //=; 2:smt.
    proc.
    call (_: collision PRFi.m,
             ={m}(PRPi,PRFi) /\ (PRP_indirect_bad.bad{1} <=> collision PRFi.m{2}),
             PRP_indirect_bad.bad{1} <=> collision PRFi.m{2}).
      exact D_ll.
      proc.
      if=> //=; inline *.
      swap{1} 1.
      seq  1  1: (={x} /\
                  !mem (dom PRPi.m{1}) x{1} /\
                  PRFi.m{2} = PRPi.m.[x <- r]{1} /\
                  ((PRP_indirect_bad.bad \/ mem (rng PRPi.m) r){1} <=> collision PRFi.m{2})).
        by auto; smt.
        sp; if{1}.
          conseq (_: _ ==> collision PRFi.m{2} /\ PRP_indirect_bad.bad{1})=> //.
          by auto; smt.
        by auto; smt.
      move=> &2 bad; conseq (_: true ==> true: =1%r) (_: PRP_indirect_bad.bad ==> PRP_indirect_bad.bad)=> //=.
        by proc; if=> //=; inline *; seq  2: PRP_indirect_bad.bad; [auto|if=> //=; auto].
      proc; if=> //=; inline *.
      by seq  2: (X = rng PRPi.m /\ !mem (dom PRPi.m) x) 1%r 1%r 0%r _=> //=;
           [auto|if=> //=; auto|hoare; auto]; smt.
      move=> &1; conseq (_: collision PRFi.m ==> collision PRFi.m: =1%r)=> //=.
      by proc; if; auto; smt.
    by inline *; auto; progress; smt.
  qed.
end section Upto.

(** We now bound the probability of collisions by instantiating a
    generic Birthday Bound result:
      Pr[IND(PRFi,DBounder(D)).main() @ &m: collision PRFi.m]
      <= q^2 * Pr[x = $uD: x = witness],

    where DBounder prevents the distinguisher from calling the
    f-oracle more than q times. **)
module DBounder (D:Distinguisher,F:PRF_Oracles) = {
  module FBounder = {
    var c:int

    proc f(x:D): D = {
      var r = witness;

      if (c < q) {
        r = F.f(x);
        c = c + 1;
      }
      return r;
    }
  }

  module D = D(FBounder)

  proc distinguish(): bool = {
    var b;

    FBounder.c = 0;
    b = D.distinguish();
    return b;
  }
}.

section CollisionProbability.
  declare module D:Distinguisher {PRFi, DBounder}.
  axiom D_ll (O <: PRF_Oracles {D}): islossless O.f => islossless D(O).distinguish.

  local clone import Birthday as BBound with
    op q <- q,
    type T <- D,
    op uT <- uD
  proof * by smt.

  (* We construct a Birthday Bound adversary from the IND
     experiment. *)
  local module A(S:ASampler):Adv(S) = {
    (* We simulate an f-oracle using the s-oracle *)
    module F = {
      proc init = PRFi.init

      proc f(x:D): D = {
        if (!mem (dom PRFi.m) x) {
          PRFi.m.[x] = S.s();
        }
        return oget PRFi.m.[x];
      }
    }

    (* Recall from the Birthday clone that Birthday Bound adversaries
       are restricted to make at most q oracle queries. *)
    module IND = IND(F,DBounder(D))

    proc a(): unit = {
      var b:bool;
      b = IND.main();
    }
  }.

  local lemma A_ll (S <: ASampler {A}) &m: islossless S.s => islossless A(S).a.
  proof.
    move=> S_ll; proc; inline*; wp.
    call (_: true).
      exact D_ll.
      by proc; inline*; do!(sp; if=> //=; auto); wp; call S_ll.
    by inline*; auto.
  qed.

  local lemma A_bounded &m: (size Sample.l){m} = 0 => Pr[A(Sample).a() @ &m: (size Sample.l) <= q] = 1%r.
  proof.
    move=> l_empty; byphoare (_: size Sample.l = 0 ==> _)=> //=.
    proc.
    inline*; wp.
    call (_: size Sample.l <= DBounder.FBounder.c /\ DBounder.FBounder.c <= q).
      exact D_ll.
      by proc; inline*; do!(sp; if=> //=); auto; smt.
    by auto; smt.
  qed.

  local lemma pr_PRFi_Exp_collision &m:
    Pr[IND(PRFi,DBounder(D)).main() @ &m: collision PRFi.m]
    = Pr[Exp(Sample,A).main() @ &m: !uniq Sample.l].
  proof.
    byequiv (_: ={glob D} ==> collision PRFi.m{1} <=> !uniq Sample.l{2})=> //=.
    proc; inline*; wp.
    call (_: ={PRFi.m,DBounder.FBounder.c} /\
             (forall x, mem (rng PRFi.m) x <=> mem Sample.l x){2} /\
             (collision PRFi.m{1} <=> !uniq Sample.l{2})).
      proc; inline*.
      sp; if=> //=.
      sp; if=> //=; auto.
      progress [-split].
      rewrite H3 //=; split.
        move=> x0; rewrite rng_set !inE.
        by rewrite rm_nin_id //; rewrite H; smt.
        by rewrite -nand -H0 -H /= collision_add // orbC.
    auto; progress.
      by rewrite rng_empty in_fset0.
      smt.
  qed.

  lemma pr_PRFi_collision &m:
    Pr[IND(PRFi,DBounder(D)).main() @ &m: collision PRFi.m]
    <= (q^2)%r * mu uD (pred1 witness).
  proof.
    rewrite (pr_PRFi_Exp_collision &m).
    exact/(pr_collision A A_ll A_bounded &m).
  qed.
end section CollisionProbability.

(* We pull together the results of the first two sections *)
lemma PartialConclusion (D <: Distinguisher {PRPi, PRFi, DBounder}) &m:
  (forall (O <: PRF_Oracles {D}), islossless O.f => islossless D(O).distinguish) =>
  `|Pr[IND(PRPi'(Indirect),DBounder(D)).main() @ &m: res]
    - Pr[IND(PRFi,DBounder(D)).main() @ &m: res]|
  <= (q^2)%r * mu uD (pred1 witness).
proof.
  move=> D_ll.
  cut:= pr_PRFi_collision D D_ll &m.
  cut:= pr_PRPi'_Indirect_PRFi (DBounder(D)) _ &m.
    move=> O O_ll; proc.
    call (D_ll (<: DBounder(D,O).FBounder) _).
      by proc; sp; if=> //=; wp; call O_ll.
    by auto.
  smt.
qed.

(** This section proves the equivalence between the Ideal PRP and the
    module PRPi'(Indirect) used in section Upto. **)
section PRPi_PRPi'_Indirect.
  (* The key is in proving that Direct.sample and Indirect.sample
     define the same distribution. We do this by extensional equality
     of distributions:
       forall a, Pr[Direct.sample: res = a] = Pr[Indirect.sample: res = a]. *)
  equiv eq_Direct_Indirect: Direct.sample ~ Indirect.sample: ={X} ==> ={res}.
  proof.
    bypr (res{1}) (res{2})=> //. (* Pointwise equality of distributions *)
    progress.
    (* We first perform the computation on the easy side,... *)
    cut ->: Pr[Direct.sample(X{1}) @ &1: a = res] = mu (uD \ X{1}) (pred1 a).
      byphoare (_: X = X{1} ==> _)=> //=.
      proc; rnd=> //=; skip; progress.
      by rewrite pred1E -{2}(etaP ((=) a)) etaE.
    subst X{1}.
    (* ... and we are left with the difficult side *)
    byphoare (_: X = X{2} ==> _)=> //=.
    (* We deal separately with the case where a is in X and thus has
       probability 0 of being sampled) *)
    case (mem X{2} a)=> [a_in_X | a_notin_X].
      conseq (_: _ ==> _: 0%r); first smt.
      proc.
      seq  1: (mem X r)
              _ 0%r
              _ 0%r
              (X = X{2}).
        by auto.
        by rcondt 1=> //=; rnd=> //=; skip; smt.
        by rcondf 1=> //=; hoare; skip; smt.
        done.
    (* And we are now left with the case where a is not in X *)
    proc.
      alias 2 r0 = r.
      (* There are two scenarios that lead to a = r:
           - r0 = a /\ r = a (with probability mu uD (pred1 a));
           - r0 <> a /\ r = a (with probability mu uD (fun x, mem x X) * mu (uD \ X) (pred1 a)). *)
      phoare split (mu uD (pred1 a)) (mu uD (mem X) * mu (uD \ X) (pred1 a)): (r0 = a).
        (* Bound *)
        progress.
        rewrite -/(mu_x (uD \ X{2}) _) mu_x_def.
        cut -> //=: in_supp a (uD \ X{2}) by smt.
        rewrite /weight /mu_x.
        cut not_empty: mu uD predT - mu uD (mem X{2}) <> 0%r.
          rewrite -mu_not.
          cut: 0%r < mu uD (predC (mem X{2})); last smt.
          by rewrite witness_support; exists a; smt.
        have:= uD_ll; rewrite /is_lossless; move=> ->. (* BUG? "rewrite uD_ll." *)
        by fieldeq; first smt.
        (* case r0 = a *)
        seq  2: (a = r0) (mu uD (pred1 a)) 1%r _ 0%r (r0 = r /\ X = X{2}).
          by auto.
          by wp; rnd; skip; progress; rewrite pred1E -(etaE ((=) a)) etaP.
          by rcondf 1.
          by hoare; conseq (_: _ ==> true)=> //=; smt.
          done.
      (* case r0 <> a *)
      seq  2: (!mem X r)
              _                 0%r
              (mu uD (mem X)) (mu (uD \ X) (pred1 a))
              (r0 = r /\ X = X{2}).
        by auto.
        by hoare; rcondf 1=> //=; skip; smt.
        by wp; rnd.
        rcondt 1=> //=; rnd (pred1 a).
        by skip; smt.
        done.
  qed.

  (* The rest is easy *)
  local equiv eq_PRPi_PRPi'_Indirect: PRPi.f ~ PRPi'(Indirect).f:
    ={x, PRPi.m} ==> ={res, PRPi.m}.
  proof.
    transitivity PRPi'(Direct).f (={glob PRPi,x} ==> ={glob PRPi,res}) (={glob PRPi,x} ==> ={glob PRPi,res}).
      by move=> &1 &2 [->> ->>]; exists PRPi.m{2}, x{2}.
      done.
      by proc; inline *; if=> //=; auto.
      by proc; if=> //=; wp; call eq_Direct_Indirect.
  qed.

  declare module D:Distinguisher {PRPi}.

  lemma pr_PRPi_PRPi'_Indirect &m:
    Pr[IND(PRPi,D).main() @ &m: res] = Pr[IND(PRPi'(Indirect),D).main() @ &m: res].
  proof.
    byequiv=> //=.
    proc.
    call (_: ={PRPi.m}).
      by apply eq_PRPi_PRPi'_Indirect.
    by inline*; auto.
  qed.
end section PRPi_PRPi'_Indirect.

lemma Conclusion (D <: Distinguisher {PRPi, PRFi, DBounder}) &m:
  (forall (O <: PRF_Oracles {D}), islossless O.f => islossless D(O).distinguish) =>
  `|Pr[IND(PRPi,DBounder(D)).main() @ &m: res]
    - Pr[IND(PRFi,DBounder(D)).main() @ &m: res]|
  <= (q^2)%r * mu uD (pred1 witness).
proof.
  move=> D_ll.
  rewrite (pr_PRPi_PRPi'_Indirect (DBounder(D)) &m).
  exact (PartialConclusion D &m D_ll).
qed.
