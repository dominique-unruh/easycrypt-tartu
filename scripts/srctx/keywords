#! /usr/bin/env python

# --------------------------------------------------------------------
import sys, os, re, time, errno, itertools as it, StringIO as sio

# --------------------------------------------------------------------
def _options():
    from optparse import OptionParser

    parser = OptionParser(usage = 'Usage: %prog [options] <args...>')

    parser.add_option(
        '-m', '--mode',
        default = 'raw',
        help    = 'output mode (raw|emacs|javascript)')

    (options, args) = parser.parse_args()

    if options.mode not in ('raw', 'emacs', 'javascript', 'latex'):
        parser.error("invalid mode: `%s'" % (options.mode,))

    if len(args) != 0:
        parser.error('this program does not take any argument')

    return options

# --------------------------------------------------------------------
def _do_raw(keywords, options):
    for k in sorted(keywords.keys()):
        print "%s: %s" % (k, ", ".join(sorted(keywords[k])))

# --------------------------------------------------------------------
def _do_emacs(keywords, options):
    print "; Generated on %s" % (time.ctime(),)
    print
    for k in sorted(keywords.keys()):
        print "(defvar easycrypt-%s-keywords '(" % (k,)
        for v in keywords[k]:
            print "  \"%s\"" % (v,)
        print "))"
        print
    print "(provide 'easycrypt-keywords)"

# --------------------------------------------------------------------
def _do_javascript(keywords, options):
    print "// Generated on %s" % (time.ctime(),)
    print 'var cKeywords = "%s"' % \
            (' '.join(sorted(set(it.chain(*keywords.values())))))
    print "// END"

# --------------------------------------------------------------------
def _do_latex(keywords, options):
    buffer = sio.StringIO()

    print >>buffer, "%% Generated on %s" % (time.ctime(),)
    print >>buffer
    print >>buffer, """\
\\lstdefinelanguage{easycrypt-kw}{
  morekeywords=[1]{%s},
  morekeywords=[2]{%s},
  morekeywords=[3]{%s},
  morekeywords=[4]{%s},
  morekeywords=[5]{%s},
  morekeywords=[6]{%s},
}
""" % (
    ','.join(keywords.get('prog'     , [])),
    ','.join(keywords.get('global'   , [])),
    ','.join(keywords.get('tactic'   , [])),
    ','.join(keywords.get('tactical' , [])),
    ','.join(keywords.get('bytac'    , [])),
    ','.join(keywords.get('dangerous', [])),
)

    NOCMD = ['beta', 'delta', 'iota', 'gamma', 'zeta']

    for v in it.chain(*keywords.values()):
        if v in NOCMD:
            continue
        print >>buffer, \
            '\\def\\%(macro)s{\\ensuretext{\\ls[language=easycrypt]"%(name)s"}}' % \
            dict(macro = v.capitalize().replace('_', ''), name = v)

    sys.stdout.write(buffer.getvalue())

# --------------------------------------------------------------------
def process():
    options  = _options()
    keywords = dict()

    for line in sys.stdin:
        line = re.sub(r'\s+', '', line)
        mtch = re.search(r'^"(.*?)",(.*?);\(\*KW:(.*?)\*\)$', line)

        if mtch is not None:
            keywords.setdefault(mtch.group(3), []).append(mtch.group(1))

    callback = '_do_%s' % (options.mode,)
    callback = getattr(sys.modules[__name__], callback)

    callback(keywords, options)

# --------------------------------------------------------------------
if __name__ == '__main__':
    process()
